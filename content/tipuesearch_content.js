var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'About.html'}, {'title': '上課內容', 'text': '', 'tags': '', 'url': '上課內容.html'}, {'title': 'w4-5', 'text': '本課程所謂個人網站, 即 github帳號.github.io, 可由使用者自行設定內容, 建議長期維護後可用於研究所推甄, 或求職時使用. \n 本課程所謂評分網站, 即 github帳號.github.io/cad2023, 內容及維護歴程資料將用於課程評分. \n 第四週任務: \n \n 建立線上考試帳號. \n 自行建立 Github 帳號下的 cad2023 倉儲 ( template ), 並設定 Github Pages. \n 利用 Replit 啟動 Github 帳號下的 cad2023 內容編輯網站, 並設法將改版內容推向 Github ( cp2023 參考內容 ). \n 依據 \xa0 112 學年度第一學期教師授課表 中的學員修課名單, 利用 Teams 中的 Excel 取學員 Github 帳號. \n 利用自選 CAD 套件 (Solidworks, Solid Edge, Inventor, NX, Creo, Onshape, Solvespace 或其他套件) 完成任務一的零組件設計繪圖. \n 參考 \xa0 pjcopsim \xa0 與 \xa0 resources , 將任務一所完成的零組件轉入 CoppeliaSim, 並進行系統模擬設計. \n \n \n 評分網站與倉儲: \n 2a cad2023 學員網站與倉儲連結 \n 2b cad2023 學員網站與倉儲連結 \n 學員展示用 IPv6 位址: \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 班級名單序號 \n \n 以下為專案一 perpetual motion simulator 的零組件設計繪圖與初步系統模擬範例: \n \n Perpetual Motion Simulator in Onshape , 轉入 CoppeliaSim 後放大 10 倍, 且 z 軸向上之模擬場景, \xa0 下載 perpetual motion simulator stage2.7z \xa0 (需要下載密碼) \n \n w5 2b 從 Onshape 轉出零組件 STL 後轉入 CoppeliaSim 操作說明 . \n w5 2b \xa0 建立 cad2023 且 import 進入 Replit 學員名單 . \n w5 2a \xa0 建立 cad2023 且 import 進入 Replit 學員名單 . \n \n 希望達成的系統模擬結果: \n \n 其他在電腦輔助設計室 Win 11 電腦所執行的 \xa0 perpetual motion simulator 模擬影片 \n 請各學員自行利用 \xa0 https://github.com/mdecycu/cmsite \xa0 作為 Template 建立 cad2023 評分倉儲, 或者自行從空倉儲, 以 \xa0 https://github.com/mdecycu/cmsimde \xa0 作為子模組建立 cad2023 評分倉儲. \n 利用 cmsite 倉儲內容作為 Template 建立 cad2023 倉儲 : \n \n 登入 Github 帳號 \n 連線至 \xa0 https://github.com/mdecycu/cmsite , 選擇 \xa0 Use this template \xa0 下方的 Create a new repository, 建立 cad2023 倉儲 \n \n 利用空倉儲建立 cad2023 倉儲 : (w7 2b 時段 操作說明1 , \xa0 操作說明2 ) \n 必須在近端 Windows、Linux 或 Mac 操作系統中的命令列中執行 git 指令, 淺綠色部分為需要輸入的指令. \n \n mkdir cad2023 \n cd cad2023 \n git init \n 利用 SciTE 建立 README.md 檔案, 放入後續在 Replit 會需要的 git submodule update 以及 pip install 指令 \n git add README.md \n git commit -m \xa0 "add README.md" \n 利用下列指令將 cmsimde 倉儲設定為本倉儲的子模組且放入 cmsimde 目錄中 \n git submodule add https: //github.com/mdecycu/cmsimde.git cmsimde \n 將 cmsimde 目錄中的 up_dir 內容複製到倉儲根目錄 \n 納入所有變更的內容 \n git add . \n git commit -m \xa0 "add cmsimde as submodule" \n 建立 main 分支, 且設為主分支 \n git branch -M main \n 設定 putty session 名稱為 github.com, 且能以 SSH 連線至 github.com 主機 \n git remote add origin git@github.com:scrum-1/cad2023.git \n git push -u origin main \n \n 過程中若出現 git 從 github.com 連線時產生 Error, 則可能是因為 Windows SChannel API 取用沒有設定對應 key 資料, 此時可以設法使用 OpenSSL 進行連線 handshake, 而不使用 SChannel API 進行認證. \n \n 參考的 .gitconfig 設定如下: \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n \n \n \n [user] \n \xa0\xa0\xa0\xa0 name = scrum-1 \n \xa0\xa0\xa0\xa0 email = scrum1@mde.tw \n [http] \n \xa0\xa0\xa0\xa0 proxy = http: //[2001:288:6004:17::4]:3128 \n \xa0 \xa0 \n ; Switching to openssl \n ; https: //github.com/desktop/desktop/issues/3260 \n [http  "https://github.com" ] \n sslVerify =  false \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w4-5.html'}, {'title': 'w6-7', 'text': 'w5 之前的教學影片: \n 利用隨身碟上的批次檔案進行電腦輔助設計室網路環境設定 \xa0(更完整的 網路設定內容 ) \n w5 2b 從 Onshape 轉出零組件 STL 後轉入 CoppeliaSim 操作說明 \n \n w6 \n 評分網站與倉儲: \n 2a cad2023 學員網站與倉儲連結 \n ag1 \xa0 ( repo ) \n ag2 \xa0 ( repo ) \n ag3 \xa0 ( repo ) \n ag4 \xa0 ( repo ) \n ag5 \xa0 ( repo ) \n ag6 \xa0 ( repo ) \n 2b cad2023 學員網站與倉儲連結 \n 學員展示用 IPv6 位址: \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 班級名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 班級名單序號 \n 建立線上考試題目: \n 學員完成任務一零組件繪圖 \n 學習如何利用 zmqRemote API Python 控制模擬場景中的零組件 \n 2a w6 已經建立評分倉儲, 設定 Pages, import 進入 Replit, 並能推送版本回到 github \xa0 名單 : \n 40923118 \xa0 ( repo ) 40923124 \xa0 ( repo ) 40923127 \xa0 ( repo ) 40923139 \xa0 ( repo ) 40923213 \xa0 ( repo ) 41023134 \xa0 ( repo ) 41023155 \xa0 ( repo ) 41023156 \xa0 ( repo ) 41123105 \xa0 ( repo ) 41123108 \xa0 ( repo ) 41123111 \xa0 ( repo ) 41123112 \xa0 ( repo ) 41123114 \xa0 ( repo ) 41123115 \xa0 ( repo ) 41123116 \xa0 ( repo ) 41123117 \xa0 ( repo ) 41123119 \xa0 ( repo ) 41123120 \xa0 ( repo ) 41123122 \xa0 ( repo ) 41123123 \xa0 ( repo ) 41123124 \xa0 ( repo ) 41123126 \xa0 ( repo ) 41123128 \xa0 ( repo ) 41123129 \xa0 ( repo ) 41123130 \xa0 ( repo ) 41123134 \xa0 ( repo ) 41123135 \xa0 ( repo ) 41123137 \xa0 ( repo ) 41123139 \xa0 ( repo ) 41123140 \xa0 ( repo ) 41123141 \xa0 ( repo ) 41123142 \xa0 ( repo ) 41123143 \xa0 ( repo ) 41123144 \xa0 ( repo ) 41123145 \xa0 ( repo ) 41123146 \xa0 ( repo ) 41123148 \xa0 ( repo ) 41123149 \xa0 ( repo ) 41123150 \xa0 ( repo ) 41123152 \xa0 ( repo ) \n 2b w6 已經建立評分倉儲, 設定 Pages, import 進入 Replit, 並能推送版本回到 github \xa0 名單 : \n 41123205 41123215 41123216 41123220 41123231 41123241 41123243 41123251 \n 利用 pull request 加入或修改 \xa0 https://github.com/mdecycu/studlist \xa0倉儲中 \xa0 2b.txt \xa0 資料的 說明影片 . \n 利用 \xa0 https://github.com/mdecycu/cmsite \xa0作為 template 建立 cad2023 倉儲與網站, 並轉入 Replit 進行維護的 說明影片 . \n 2a 開始進行九人一組, 每三人坐在一起, 由組長建立 cad2023_ag1 ~ cad2023_ag6, 並將 mdecycu 設為協同者的 說明影片 . \n \n w7 \n 2b 進行九人一組安排固定座位, 由組長建立 cad2023_bg1 ~ cad2023_bg6, 並將 mdecycu 設為協同者. \n 各九人分組必須在 w9 之前繳出下列圖示的 3D 可自行列印的零組件模型, 含各 CAD 套件的完整安裝與零組件繪圖過程影片(期中考週由各組進行簡報) . \n \n SolidWorks, 請採用 \xa0 2022 以上版本 , 安裝檔案 SOLIDWORKS 2022 SP3.1_20220711.7z 16GB. 參考資料: \xa0 http://wcm.cycu.org:88/github/cad2019/downloads/Solidworks_Tutorial/ \xa0 (在系網以 IPv6 連線開啟) \n NX, 請採用 \xa0 NX2027.3401_lite_cad2022.7z \xa0 (需要下載密碼, 下載 2GB, 解開後約 8GB). \n Inventor, 請在校網或使用 VPN 下載 2022 版本 (載點 \xa0 1 , \xa0 2 , \xa0 3 , 安裝檔案 Inventor_Pro_2022_Traditional_Chinese_Win_64bit_Dlm_001_003.sfx.exe 2GB). \n Solid Edge, 請使用 \xa0 Community Edition , Gmail 登入後, 下載 Solid_Edge_Community_2023_2210.exe 3.8GB. \n Creo, 請使用 \xa0 Student Edition , 以學校電子郵箱註冊可以下載 Creo 10 (MED-100WIN-CD-470_10-0-0-0_Win64.zip 安裝檔案 5.9GB), \xa0 參考資料 . \n Onshape . \n Fusion 360, 請在校網或使用 VPN \xa0 下載 , Fusion 360 Admin Install.exe 安裝檔案 GB. \n \n \n 維護 cad2023 倉儲與網站的方法: \n \n Replit + Github \n 可攜環境 + Github (下載包含 Python 3.12.0, Tiny C Compiler 與 CoppeliaSim 4.5.1 的 \xa0 portable_2024_cp_wcms_cad_cd_w_ebooks.7z , 1.2GB 解開後 3.3GB, 需要下載密碼), 維護倉儲與網站說明影片 之一 , \xa0 之二 . \n 自架伺服器 + Github \n', 'tags': '', 'url': 'w6-7.html'}, {'title': 'w8', 'text': '', 'tags': '', 'url': 'w8.html'}, {'title': 'w9-11', 'text': '', 'tags': '', 'url': 'w9-11.html'}, {'title': 'w12', 'text': '', 'tags': '', 'url': 'w12.html'}, {'title': 'w13-14', 'text': '', 'tags': '', 'url': 'w13-14.html'}, {'title': 'w15', 'text': '\n', 'tags': '', 'url': 'w15.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};